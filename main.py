# Importar m√≥dulos necesarios
import csv  # Para leer y escribir archivos CSV
import sys  # Para funcionalidades del sistema como salir del programa
import time  # Para medir tiempos de ejecuci√≥n

def cargar_peliculas():
    """Carga las pel√≠culas desde el archivo IMBD.csv"""
    peliculas = []  # Lista para almacenar todas las pel√≠culas
    
    try:
        # Abrir el archivo CSV con codificaci√≥n UTF-8 (para manejar caracteres especiales)
        with open('IMBD.csv', 'r', encoding='utf-8') as archivo:
            # Crear un lector de CSV que mapea cada fila a un diccionario
            lector = csv.DictReader(archivo)
            
            # Mostrar las columnas disponibles en el archivo
            print("üìù Columnas encontradas en el CSV:", lector.fieldnames)
            
            # Procesar cada fila del archivo CSV
            for fila in lector:
                # Mostrar datos de la primera fila para verificaci√≥n
                if len(peliculas) == 0:
                    print("üîç Primera fila (para verificar datos):")
                    for key, value in fila.items():
                        print(f"  {key}: '{value}'")
                
                try:
                    # Procesamiento del a√±o - extraer solo los 4 d√≠gitos num√©ricos
                    year_str = str(fila.get('year', '')).strip()
                    if year_str.isdigit() and len(year_str) == 4:
                        fila['year'] = int(year_str)
                    else:
                        # Extraer d√≠gitos de cadenas como "(1994)" o "1994-01-01"
                        digits = ''.join([c for c in year_str if c.isdigit()])
                        fila['year'] = int(digits[:4]) if len(digits) >= 4 else 0
                    
                    # Procesamiento del rating - manejar diferentes formatos num√©ricos
                    rating_str = str(fila.get('rating', '')).strip()
                    if rating_str.replace('.', '').replace(',', '').isdigit():
                        fila['rating'] = float(rating_str.replace(',', '.'))  # Manejar decimales con coma
                    else:
                        fila['rating'] = 0.0
                    
                    # Procesamiento de votos - eliminar comas en n√∫meros grandes
                    votes_str = str(fila.get('votes', '')).strip()
                    if votes_str.replace(',', '').isdigit():
                        fila['votes'] = int(votes_str.replace(',', ''))
                    else:
                        fila['votes'] = 0
                        
                except (ValueError, AttributeError) as e:
                    # Manejar errores en la conversi√≥n de datos
                    print(f"‚ö†Ô∏è  Error convirtiendo datos en fila {len(peliculas)+1}: {e}")
                    fila['year'] = 0
                    fila['rating'] = 0.0
                    fila['votes'] = 0
                
                # Agregar la pel√≠cula procesada a la lista
                peliculas.append(fila)
        
        # Estad√≠sticas de carga exitosa
        print(f"‚úÖ Se cargaron {len(peliculas)} pel√≠culas desde IMBD.csv")
        
        # Calcular y mostrar estad√≠sticas de datos v√°lidos
        a√±os_validos = sum(1 for p in peliculas if p['year'] > 0)
        print(f"üìä A√±os v√°lidos encontrados: {a√±os_validos}/{len(peliculas)}")
        
        # Mostrar rango de a√±os si hay datos v√°lidos
        if a√±os_validos > 0:
            a√±os_unicos = sorted(set(p['year'] for p in peliculas if p['year'] > 0))
            print(f"üìÖ Rango de a√±os encontrados: {min(a√±os_unicos)} - {max(a√±os_unicos)}")
            print("Ejemplos de a√±os:", a√±os_unicos[:10], "...")
        
        # Mostrar ejemplos de datos para diagn√≥stico
        print("\nüîç Ejemplos de pel√≠culas con a√±os v√°lidos:")
        for p in [p for p in peliculas[:20] if p['year'] > 0][:3]:
            print(f"  {p['title']} - A√±o: {p['year']}")
        
        print("\n‚ö†Ô∏è  Ejemplos de pel√≠culas SIN a√±o v√°lido:")
        for p in [p for p in peliculas[:20] if p['year'] == 0][:3]:
            print(f"  {p['title']} - Valor original: '{p.get('year', '')}'")
        
        return peliculas
        
    except FileNotFoundError:
        print("‚ùå Error: No se encontr√≥ el archivo 'IMBD.csv'")
        print("   Aseg√∫rate de que el archivo est√© en el mismo directorio que este programa")
        return None
    except Exception as e:
        print(f"‚ùå Error al cargar el archivo: {str(e)}")
        return None

def mostrar_peliculas(peliculas, limite=10):
    """Muestra las pel√≠culas en formato de tabla con l√≠mite opcional"""
    if not peliculas:
        print("No hay pel√≠culas para mostrar.")
        return
    
    # Encabezado de la tabla
    print(f"\n{'='*110}")
    print(f"Mostrando {min(len(peliculas), limite)} de {len(peliculas)} pel√≠culas:")
    print(f"{'='*110}")
    print(f"{'#':<3} {'T√çTULO':<40} {'A√ëO':<6} {'G√âNERO':<18} {'RATING':<8} {'VOTOS':<12}")
    print("-" * 110)
    
    # Mostrar cada pel√≠cula con formato alineado
    for i, p in enumerate(peliculas[:limite]):
        # Acortar campos largos para mejor visualizaci√≥n
        titulo = p['title'][:39] + '...' if len(p['title']) > 39 else p['title']
        a√±o = str(p['year']) if p['year'] > 0 else 'N/A'
        genero = p['genre'][:17] + '...' if len(p['genre']) > 17 else p['genre']
        rating = f"{p['rating']:.1f}" if p['rating'] > 0 else 'N/A'
        votos = f"{p['votes']:,}" if p['votes'] > 0 else 'N/A'
        
        # Imprimir fila formateada
        print(f"{i+1:<3} {titulo:<40} {a√±o:<6} {genero:<18} {rating:<8} {votos:<12}")
    
    # Indicador si hay m√°s pel√≠culas que el l√≠mite mostrado
    if len(peliculas) > limite:
        print(f"\n... y {len(peliculas) - limite} pel√≠culas m√°s.")

# ===================== ALGORITMOS DE ORDENAMIENTO =====================

def bubble_sort_year(peliculas):
    """Ordena pel√≠culas por a√±o usando Bubble Sort"""
    pelis_copia = peliculas.copy()  # Trabajar sobre una copia
    n = len(pelis_copia)
    
    print("üîÑ Ejecutando Bubble Sort por a√±o...")
    inicio = time.time()  # Iniciar cron√≥metro
    
    # Algoritmo Bubble Sort
    for i in range(n):
        for j in range(0, n-i-1):
            if pelis_copia[j]['year'] < pelis_copia[j+1]['year']:  # Orden descendente
                pelis_copia[j], pelis_copia[j+1] = pelis_copia[j+1], pelis_copia[j]
    
    # Mostrar tiempo de ejecuci√≥n
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos")
    
    # Mostrar resultados
    print("\nüîÑ Pel√≠culas ordenadas por A√ëO (Bubble Sort - Descendente):")
    mostrar_peliculas(pelis_copia)

def selection_sort_rating(peliculas):
    """Ordena pel√≠culas por rating usando Selection Sort"""
    pelis_copia = peliculas.copy()
    n = len(pelis_copia)
    
    print("‚≠ê Ejecutando Selection Sort por rating...")
    inicio = time.time()
    
    # Algoritmo Selection Sort
    for i in range(n):
        max_idx = i  # Asumir que el actual es el m√°ximo
        for j in range(i+1, n):
            if pelis_copia[j]['rating'] > pelis_copia[max_idx]['rating']:
                max_idx = j  # Encontrar el m√°ximo real
        
        # Intercambiar el m√°ximo encontrado con la posici√≥n actual
        pelis_copia[i], pelis_copia[max_idx] = pelis_copia[max_idx], pelis_copia[i]
    
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos")
    
    print("\n‚≠ê Pel√≠culas ordenadas por RATING (Selection Sort - Descendente):")
    mostrar_peliculas(pelis_copia)

def insertion_sort_genre(peliculas):
    """Ordena pel√≠culas por g√©nero usando Insertion Sort"""
    pelis_copia = peliculas.copy()
    
    print("üé≠ Ejecutando Insertion Sort por g√©nero...")
    inicio = time.time()
    
    # Algoritmo Insertion Sort
    for i in range(1, len(pelis_copia)):
        key = pelis_copia[i]  # Elemento a insertar
        j = i - 1
        
        # Mover elementos mayores hacia la derecha
        while j >= 0 and pelis_copia[j]['genre'].lower() > key['genre'].lower():
            pelis_copia[j + 1] = pelis_copia[j]
            j -= 1
        
        # Insertar el elemento en su posici√≥n correcta
        pelis_copia[j + 1] = key
    
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos")
    
    print("\nüé≠ Pel√≠culas ordenadas por G√âNERO (Insertion Sort - Alfab√©tico):")
    mostrar_peliculas(pelis_copia)

def quick_sort_rating(peliculas):
    """Ordena pel√≠culas por rating usando Quick Sort"""
    def quicksort(arr):
        """Funci√≥n recursiva de Quick Sort"""
        if len(arr) <= 1:  # Caso base
            return arr
        
        pivot = arr[len(arr) // 2]['rating']  # Pivote del medio
        left = [x for x in arr if x['rating'] > pivot]    # Mayores que pivote
        middle = [x for x in arr if x['rating'] == pivot] # Iguales al pivote
        right = [x for x in arr if x['rating'] < pivot]   # Menores que pivote
        
        return quicksort(left) + middle + quicksort(right)  # Combinar resultados
    
    print("‚ö° Ejecutando Quick Sort por rating...")
    inicio = time.time()
    
    pelis_ordenadas = quicksort(peliculas.copy())
    
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos")
    
    print("\n‚ö° Pel√≠culas ordenadas por RATING (Quick Sort - Descendente):")
    mostrar_peliculas(pelis_ordenadas)

# ===================== ALGORITMOS DE B√öSQUEDA =====================

def busqueda_lineal_titulo(peliculas):
    """Busca pel√≠culas por t√≠tulo usando b√∫squeda lineal"""
    titulo = input("Ingrese el t√≠tulo a buscar: ").strip().lower()
    encontradas = []
    
    print(f"üîç Buscando pel√≠culas con '{titulo}' en el t√≠tulo...")
    inicio = time.time()
    
    # B√∫squeda lineal - revisar cada elemento
    for pelicula in peliculas:
        if titulo in pelicula['title'].lower():
            encontradas.append(pelicula)
    
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos")
    
    if encontradas:
        print(f"\nüîç Se encontraron {len(encontradas)} pel√≠culas con '{titulo}' en el t√≠tulo:")
        mostrar_peliculas(encontradas)
    else:
        print(f"‚ùå No se encontraron pel√≠culas con '{titulo}' en el t√≠tulo")

def busqueda_lineal_genero(peliculas):
    """Busca pel√≠culas por g√©nero usando b√∫squeda lineal"""
    genero = input("Ingrese el g√©nero a buscar: ").strip().lower()
    encontradas = []
    
    print(f"üé≠ Buscando pel√≠culas del g√©nero '{genero}'...")
    inicio = time.time()
    
    for pelicula in peliculas:
        if genero in pelicula['genre'].lower():
            encontradas.append(pelicula)
    
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos")
    
    if encontradas:
        print(f"\nüé≠ Se encontraron {len(encontradas)} pel√≠culas del g√©nero '{genero}':")
        mostrar_peliculas(encontradas)
    else:
        print(f"‚ùå No se encontraron pel√≠culas del g√©nero '{genero}'")

def busqueda_binaria_year(peliculas):
    """Busca pel√≠culas por a√±o usando b√∫squeda binaria"""
    try:
        a√±o = int(input("Ingrese el a√±o a buscar: "))
    except ValueError:
        print("‚ùå Por favor ingrese un a√±o v√°lido (n√∫mero entero).")
        return
    
    print(f"üìÖ Buscando pel√≠culas del a√±o {a√±o} usando b√∫squeda binaria...")
    inicio = time.time()
    
    # Primero ordenar por a√±o (requisito para b√∫squeda binaria)
    pelis_ordenadas = sorted(peliculas, key=lambda x: x['year'])
    encontradas = []
    low, high = 0, len(pelis_ordenadas) - 1
    
    # Algoritmo de b√∫squeda binaria
    while low <= high:
        mid = (low + high) // 2  # Punto medio
        
        if pelis_ordenadas[mid]['year'] == a√±o:
            # Encontramos una coincidencia
            encontradas.append(pelis_ordenadas[mid])
            
            # Buscar coincidencias adyacentes (mismo a√±o)
            i = mid - 1
            while i >= 0 and pelis_ordenadas[i]['year'] == a√±o:
                encontradas.append(pelis_ordenadas[i])
                i -= 1
            
            i = mid + 1
            while i < len(pelis_ordenadas) and pelis_ordenadas[i]['year'] == a√±o:
                encontradas.append(pelis_ordenadas[i])
                i += 1
            break
            
        elif pelis_ordenadas[mid]['year'] < a√±o:
            low = mid + 1  # Buscar en mitad superior
        else:
            high = mid - 1  # Buscar en mitad inferior
    
    tiempo = time.time() - inicio
    print(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {tiempo:.6f} segundos (incluye ordenamiento)")
    
    if encontradas:
        print(f"\nüìÖ Se encontraron {len(encontradas)} pel√≠culas del a√±o {a√±o}:")
        mostrar_peliculas(encontradas)
    else:
        print(f"‚ùå No se encontraron pel√≠culas del a√±o {a√±o}")

def mostrar_estadisticas(peliculas):
    """Muestra estad√≠sticas generales del dataset de pel√≠culas"""
    if not peliculas:
        print("‚ùå No hay pel√≠culas cargadas para mostrar estad√≠sticas.")
        return
    
    print(f"\nüìä ESTAD√çSTICAS DEL DATASET:")
    print(f"{'='*60}")
    print(f"Total de pel√≠culas: {len(peliculas)}")
    
    # Estad√≠sticas de ratings
    ratings = [p['rating'] for p in peliculas if p['rating'] > 0]
    if ratings:
        print(f"Rating promedio: {sum(ratings)/len(ratings):.2f}")
        print(f"Rating m√°s alto: {max(ratings)}")
        print(f"Rating m√°s bajo: {min(ratings)}")
    else:
        print("No hay ratings v√°lidos en el dataset")
    
    # Estad√≠sticas de a√±os
    a√±os = [p['year'] for p in peliculas if p['year'] > 0]
    if a√±os:
        print(f"A√±o m√°s antiguo: {min(a√±os)}")
        print(f"A√±o m√°s reciente: {max(a√±os)}")
    else:
        print("No hay a√±os v√°lidos en el dataset")
    
    # An√°lisis de g√©neros
    generos = {}
    for p in peliculas:
        genero = p['genre'].split(',')[0].strip()  # Tomar solo el primer g√©nero
        generos[genero] = generos.get(genero, 0) + 1
    
    # Top 5 g√©neros m√°s comunes
    print(f"\nTop 5 g√©neros m√°s comunes:")
    for genero, cantidad in sorted(generos.items(), key=lambda x: x[1], reverse=True)[:5]:
        print(f"  {genero}: {cantidad} pel√≠culas")

def mostrar_ayuda():
    """Muestra informaci√≥n sobre los algoritmos implementados"""
    print(f"\nüìö INFORMACI√ìN SOBRE ALGORITMOS:")
    print(f"{'='*70}")
    
    print("\nüîÑ ALGORITMOS DE ORDENAMIENTO:")
    print("‚Ä¢ Bubble Sort: O(n¬≤)")
    print("  - Compara elementos adyacentes e intercambia si est√°n desordenados")
    print("  - Simple pero lento para datasets grandes")
    
    print("\n‚Ä¢ Selection Sort: O(n¬≤)")
    print("  - Encuentra el m√≠nimo/m√°ximo y lo coloca en su posici√≥n")
    print("  - Hace menos intercambios que Bubble Sort")
    
    print("\n‚Ä¢ Insertion Sort: O(n¬≤)")
    print("  - Construye la lista ordenada elemento por elemento")
    print("  - Eficiente para datasets peque√±os o parcialmente ordenados")
    
    print("\n‚Ä¢ Quick Sort: O(n log n) promedio, O(n¬≤) peor caso")
    print("  - Divide y vencer√°s usando un elemento pivote")
    print("  - Muy eficiente para datasets grandes")
    
    print("\nüîç ALGORITMOS DE B√öSQUEDA:")
    print("‚Ä¢ B√∫squeda Lineal: O(n)")
    print("  - Examina cada elemento secuencialmente")
    print("  - Funciona con datos ordenados y desordenados")
    
    print("\n‚Ä¢ B√∫squeda Binaria: O(log n)")
    print("  - Divide el espacio de b√∫squeda por la mitad en cada paso")
    print("  - Requiere que los datos est√©n ordenados")

def main():
    """Funci√≥n principal que maneja el men√∫ interactivo"""
    print("üé¨ SISTEMA DE PEL√çCULAS IMDB")
    print("="*60)
    
    # Cargar datos al iniciar
    peliculas = cargar_peliculas()
    
    if peliculas is None:
        print("‚ùå No se pudieron cargar los datos. Cerrando programa.")
        sys.exit(1)
    
    # Men√∫ interactivo
    while True:
        print(f"\n{'='*60}")
        print("MEN√ö PRINCIPAL")
        print("="*60)
        
        # Opciones de visualizaci√≥n
        print("\nüìã VISUALIZACI√ìN:")
        print("1. Mostrar todas las pel√≠culas")
        print("2. Estad√≠sticas del dataset")
        
        # Opciones de ordenamiento
        print("\nüîÑ ORDENAMIENTO:")
        print("3. Ordenar por a√±o (Bubble Sort)")
        print("4. Ordenar por rating (Selection Sort)")
        print("5. Ordenar por g√©nero (Insertion Sort)")
        print("6. Ordenar por rating (Quick Sort)")
        
        # Opciones de b√∫squeda
        print("\nüîç B√öSQUEDA:")
        print("7. Buscar por t√≠tulo")
        print("8. Buscar por g√©nero")
        print("9. Buscar por a√±o (B√∫squeda Binaria)")
        
        # Ayuda y salida
        print("\n‚ùì AYUDA:")
        print("10. Informaci√≥n sobre algoritmos")
        print("11. Salir")
        
        opcion = input("\nSeleccione una opci√≥n (1-11): ").strip()
        
        if opcion == "1":
            limite = input("¬øCu√°ntas pel√≠culas mostrar? (Enter para 10): ").strip()
            limite = int(limite) if limite.isdigit() else 10
            mostrar_peliculas(peliculas, limite)
        elif opcion == "2":
            mostrar_estadisticas(peliculas)
        elif opcion == "3":
            bubble_sort_year(peliculas)
        elif opcion == "4":
            selection_sort_rating(peliculas)
        elif opcion == "5":
            insertion_sort_genre(peliculas)
        elif opcion == "6":
            quick_sort_rating(peliculas)
        elif opcion == "7":
            busqueda_lineal_titulo(peliculas)
        elif opcion == "8":
            busqueda_lineal_genero(peliculas)
        elif opcion == "9":
            busqueda_binaria_year(peliculas)
        elif opcion == "10":
            mostrar_ayuda()
        elif opcion == "11":
            print("¬°Hasta luego! üëã")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor seleccione un n√∫mero del 1 al 11.")

if __name__ == "__main__":
    main()